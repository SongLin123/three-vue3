{"version":3,"file":"create-floor.mjs","sources":["../../../src/hooks/create-floor.ts"],"sourcesContent":["import { onMounted } from \"vue\";\r\nimport { VertexNormalsHelper } from \"three/addons/helpers/VertexNormalsHelper.js\";\r\nimport * as THREE from \"three\";\r\n\r\nexport function createFloor(scene: THREE.Scene) {\r\n  let commonUniforms = {\r\n    height1: { type: \"f\", value: 100.0 },\r\n    u_time: { type: \"f\", value: 0.0 },\r\n    max_radius: { type: \"f\", value: 1414.213562373095 },\r\n  };\r\n  window.commonUniforms = commonUniforms;\r\n  let shadermat = new THREE.ShaderMaterial({\r\n    uniforms: {\r\n      height1: { type: \"f\", value: 50.0 },\r\n      band_width: { type: \"f\", value: 30.0 },\r\n      u_time: commonUniforms.u_time,\r\n      max_radius: commonUniforms.max_radius,\r\n    },\r\n    vertexShader: document.getElementById(\"vertexShader2\")!.textContent,\r\n    fragmentShader: document.getElementById(\"fragmentShader2\")!.textContent,\r\n    transparent: true,\r\n  });\r\n\r\n  let grid: THREE.Mesh | null = null;\r\n  onMounted(() => {\r\n    // 添加网格地面\r\n    // grid = new THREE.GridHelper(1000, 100, 0x000000, 0x000000);\r\n    // grid.material.opacity = 0.2;\r\n    // grid.material.transparent = true;\r\n\r\n    const geometry = new THREE.PlaneGeometry(1000, 1000, 500, 500);\r\n    geometry.rotateX(-Math.PI / 2);\r\n\r\n    grid = new THREE.Mesh(geometry, shadermat);\r\n    grid.userData = { type: \"floor\" };\r\n\r\n    scene.add(grid);\r\n\r\n    requestAnimationFrame(function animate() {\r\n      let v1 = 50 + 10 * Math.sin(Date.now() / 1000);\r\n      commonUniforms.height1.value = v1;\r\n\r\n      commonUniforms.u_time.value = (Date.now() * 0.001) % 3.6;\r\n      requestAnimationFrame(animate);\r\n    });\r\n  });\r\n  return { grid, commonUniforms };\r\n}\r\n"],"names":["THREE.ShaderMaterial","THREE.PlaneGeometry","THREE.Mesh"],"mappings":";;;;AAIO,SAAS,YAAY,KAAoB,EAAA;AAC9C,EAAA,IAAI,cAAiB,GAAA;AAAA,IACnB,OAAS,EAAA,EAAE,IAAM,EAAA,GAAA,EAAK,OAAO,GAAM,EAAA;AAAA,IACnC,MAAQ,EAAA,EAAE,IAAM,EAAA,GAAA,EAAK,OAAO,CAAI,EAAA;AAAA,IAChC,UAAY,EAAA,EAAE,IAAM,EAAA,GAAA,EAAK,OAAO,iBAAkB,EAAA;AAAA,GACpD,CAAA;AACA,EAAA,MAAA,CAAO,cAAiB,GAAA,cAAA,CAAA;AACxB,EAAI,IAAA,SAAA,GAAY,IAAIA,cAAqB,CAAA;AAAA,IACvC,QAAU,EAAA;AAAA,MACR,OAAS,EAAA,EAAE,IAAM,EAAA,GAAA,EAAK,OAAO,EAAK,EAAA;AAAA,MAClC,UAAY,EAAA,EAAE,IAAM,EAAA,GAAA,EAAK,OAAO,EAAK,EAAA;AAAA,MACrC,QAAQ,cAAe,CAAA,MAAA;AAAA,MACvB,YAAY,cAAe,CAAA,UAAA;AAAA,KAC7B;AAAA,IACA,YAAc,EAAA,QAAA,CAAS,cAAe,CAAA,eAAe,CAAG,CAAA,WAAA;AAAA,IACxD,cAAgB,EAAA,QAAA,CAAS,cAAe,CAAA,iBAAiB,CAAG,CAAA,WAAA;AAAA,IAC5D,WAAa,EAAA,IAAA;AAAA,GACd,CAAA,CAAA;AAED,EAAA,IAAI,IAA0B,GAAA,IAAA,CAAA;AAC9B,EAAA,SAAA,CAAU,MAAM;AAMd,IAAA,MAAM,WAAW,IAAIC,cAAoB,GAAM,EAAA,GAAA,EAAM,KAAK,GAAG,CAAA,CAAA;AAC7D,IAAA,QAAA,CAAS,OAAQ,CAAA,CAAC,IAAK,CAAA,EAAA,GAAK,CAAC,CAAA,CAAA;AAE7B,IAAA,IAAA,GAAO,IAAIC,IAAW,CAAA,QAAA,EAAU,SAAS,CAAA,CAAA;AACzC,IAAK,IAAA,CAAA,QAAA,GAAW,EAAE,IAAA,EAAM,OAAQ,EAAA,CAAA;AAEhC,IAAA,KAAA,CAAM,IAAI,IAAI,CAAA,CAAA;AAEd,IAAA,qBAAA,CAAsB,SAAS,OAAU,GAAA;AACvC,MAAI,IAAA,EAAA,GAAK,KAAK,EAAK,GAAA,IAAA,CAAK,IAAI,IAAK,CAAA,GAAA,KAAQ,GAAI,CAAA,CAAA;AAC7C,MAAA,cAAA,CAAe,QAAQ,KAAQ,GAAA,EAAA,CAAA;AAE/B,MAAA,cAAA,CAAe,MAAO,CAAA,KAAA,GAAS,IAAK,CAAA,GAAA,KAAQ,IAAS,GAAA,GAAA,CAAA;AACrD,MAAA,qBAAA,CAAsB,OAAO,CAAA,CAAA;AAAA,KAC9B,CAAA,CAAA;AAAA,GACF,CAAA,CAAA;AACD,EAAO,OAAA,EAAE,MAAM,cAAe,EAAA,CAAA;AAChC;;;;"}