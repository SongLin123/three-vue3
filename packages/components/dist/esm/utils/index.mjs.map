{"version":3,"file":"index.mjs","sources":["../../../src/utils/index.ts"],"sourcesContent":["import * as THREE from \"three\";\r\n\r\nfunction eventInObject(\r\n  event: MouseEvent | TouchEvent,\r\n  callback: (selected: THREE.Intersection | boolean) => void,\r\n  {\r\n    rootDom,\r\n    scene,\r\n    camera,\r\n  }: { rootDom: HTMLElement; scene: THREE.Object3D; camera: THREE.Camera }\r\n) {\r\n  let evtx = event.offsetX\r\n    ? event.offsetX\r\n    : event.touches\r\n    ? event.touches[0].clientX\r\n    : null;\r\n  let evty = event.offsetY\r\n    ? event.offsetY\r\n    : event.touches\r\n    ? event.touches[0].clientY\r\n    : null;\r\n\r\n  if (evtx === null) {\r\n    return;\r\n  }\r\n\r\n  var raycaster = new THREE.Raycaster();\r\n  var mouse = new THREE.Vector2();\r\n\r\n  let width1 = rootDom.clientWidth;\r\n  let height1 = rootDom.clientHeight;\r\n\r\n  mouse.x = (evtx / width1) * 2 - 1;\r\n  mouse.y = -((evty / height1) * 2 - 1);\r\n\r\n  raycaster.setFromCamera(mouse, camera);\r\n\r\n  const meshes: THREE.Mesh[] = [];\r\n  scene.traverse((mesh: THREE.Object3D | THREE.Mesh) => {\r\n    if (\r\n      mesh instanceof THREE.Mesh &&\r\n      mesh.material != null &&\r\n      mesh.userData.type !== \"floor\"\r\n    ) {\r\n      meshes.push(mesh);\r\n    }\r\n  });\r\n  var intersects = raycaster.intersectObjects(meshes);\r\n\r\n  if (intersects && intersects.length > 0) {\r\n    let selected = intersects[0];\r\n    if (callback && typeof callback == \"function\") {\r\n      callback(selected);\r\n    }\r\n  } else {\r\n    // 没点到模型\r\n    if (callback && typeof callback == \"function\") {\r\n      callback(false);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getObjFrame(obj) {\r\n  let bbox2 = new THREE.Box3().setFromObject(obj);\r\n  const center = bbox2.getCenter(new THREE.Vector3());\r\n  const size = bbox2.getSize(new THREE.Vector3());\r\n\r\n  return { center, size };\r\n}\r\n\r\nexport { eventInObject, getObjFrame };\r\n"],"names":["THREE.Raycaster","THREE.Vector2","THREE.Mesh","THREE.Box3","THREE.Vector3"],"mappings":";;AAEA,SAAS,aAAA,CACP,OACA,QACA,EAAA;AAAA,EACE,OAAA;AAAA,EACA,KAAA;AAAA,EACA,MAAA;AACF,CACA,EAAA;AACA,EAAI,IAAA,IAAA,GAAO,KAAM,CAAA,OAAA,GACb,KAAM,CAAA,OAAA,GACN,KAAM,CAAA,OAAA,GACN,KAAM,CAAA,OAAA,CAAQ,CAAC,CAAA,CAAE,OACjB,GAAA,IAAA,CAAA;AACJ,EAAI,IAAA,IAAA,GAAO,KAAM,CAAA,OAAA,GACb,KAAM,CAAA,OAAA,GACN,KAAM,CAAA,OAAA,GACN,KAAM,CAAA,OAAA,CAAQ,CAAC,CAAA,CAAE,OACjB,GAAA,IAAA,CAAA;AAEJ,EAAA,IAAI,SAAS,IAAM,EAAA;AACjB,IAAA,OAAA;AAAA,GACF;AAEA,EAAI,IAAA,SAAA,GAAY,IAAIA,SAAgB,EAAA,CAAA;AACpC,EAAI,IAAA,KAAA,GAAQ,IAAIC,OAAc,EAAA,CAAA;AAE9B,EAAA,IAAI,SAAS,OAAQ,CAAA,WAAA,CAAA;AACrB,EAAA,IAAI,UAAU,OAAQ,CAAA,YAAA,CAAA;AAEtB,EAAM,KAAA,CAAA,CAAA,GAAK,IAAO,GAAA,MAAA,GAAU,CAAI,GAAA,CAAA,CAAA;AAChC,EAAA,KAAA,CAAM,CAAI,GAAA,EAAG,IAAO,GAAA,OAAA,GAAW,CAAI,GAAA,CAAA,CAAA,CAAA;AAEnC,EAAU,SAAA,CAAA,aAAA,CAAc,OAAO,MAAM,CAAA,CAAA;AAErC,EAAA,MAAM,SAAuB,EAAC,CAAA;AAC9B,EAAM,KAAA,CAAA,QAAA,CAAS,CAAC,IAAsC,KAAA;AACpD,IACE,IAAA,IAAA,YAAgBC,IAChB,IAAA,IAAA,CAAK,YAAY,IACjB,IAAA,IAAA,CAAK,QAAS,CAAA,IAAA,KAAS,OACvB,EAAA;AACA,MAAA,MAAA,CAAO,KAAK,IAAI,CAAA,CAAA;AAAA,KAClB;AAAA,GACD,CAAA,CAAA;AACD,EAAI,IAAA,UAAA,GAAa,SAAU,CAAA,gBAAA,CAAiB,MAAM,CAAA,CAAA;AAElD,EAAI,IAAA,UAAA,IAAc,UAAW,CAAA,MAAA,GAAS,CAAG,EAAA;AACvC,IAAI,IAAA,QAAA,GAAW,WAAW,CAAC,CAAA,CAAA;AAC3B,IAAI,IAAA,QAAA,IAAY,OAAO,QAAA,IAAY,UAAY,EAAA;AAC7C,MAAA,QAAA,CAAS,QAAQ,CAAA,CAAA;AAAA,KACnB;AAAA,GACK,MAAA;AAEL,IAAI,IAAA,QAAA,IAAY,OAAO,QAAA,IAAY,UAAY,EAAA;AAC7C,MAAA,QAAA,CAAS,KAAK,CAAA,CAAA;AAAA,KAChB;AAAA,GACF;AACF,CAAA;AAEA,SAAS,YAAY,GAAK,EAAA;AACxB,EAAA,IAAI,QAAQ,IAAIC,IAAW,EAAA,CAAE,cAAc,GAAG,CAAA,CAAA;AAC9C,EAAA,MAAM,SAAS,KAAM,CAAA,SAAA,CAAU,IAAIC,SAAe,CAAA,CAAA;AAClD,EAAA,MAAM,OAAO,KAAM,CAAA,OAAA,CAAQ,IAAIA,SAAe,CAAA,CAAA;AAE9C,EAAO,OAAA,EAAE,QAAQ,IAAK,EAAA,CAAA;AACxB;;;;"}